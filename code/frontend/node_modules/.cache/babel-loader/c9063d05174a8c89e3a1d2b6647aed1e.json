{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eucas\\\\Documents\\\\UNIVERSITA\\\\3_ANNO\\\\PdS\\\\2022t1\\\\code\\\\frontend\\\\src\\\\js\\\\Grafici.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { Chart as ChartJS } from \"chart.js/auto\"; //questo serve per mostrare il grafico\n\nimport \"../css/Grafici.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grafici = () => {\n  _s();\n\n  //esempio semplificato dati dei log\n  const dati = [{\n    comunicazione: \"buono\",\n    paese: \"Italia\",\n    id: 2\n  }, {\n    comunicazione: \"errore\",\n    paese: \"Russia\",\n    id: 1\n  }, {\n    comunicazione: \"buono\",\n    paese: \"Francia\",\n    id: 2\n  }, {\n    comunicazione: \"buono\",\n    paese: \"Italia\",\n    id: 2\n  }]; // colori del grafico\n\n  const colori = [\"#33cc33\", \"red\", \"blue\", \"yellow\", \"grey\", \"green\", \"white\", \"orange\", \"black\"]; //costrutto per il grafico delle comunicazioni\n\n  var buoni = 0;\n  var errori = 0;\n  dati.forEach(dato => {\n    if (dato.comunicazione === \"buono\") buoni += 1;else errori += 1;\n  }); //costruisco il grafico delle comunicazioni\n\n  const [datiGraficoComunicazioni, setDatiGraficoComunicazioni] = useState({\n    labels: [\"Avvenute\", \"Errori\"],\n    //lista delle labels della torta\n    datasets: [{\n      label: \"Comunicazioni\",\n      data: [buoni, errori],\n      //dati che usa per creare il grafico\n      backgroundColor: colori //colora le barre\n\n    }]\n  }); //costrutto per il grafico dei posti\n\n  var posti = [];\n  posti.push({\n    paese: dati[0].paese,\n    numeri: 0\n  });\n  dati.forEach(dato => {\n    var trovato = false;\n\n    for (var i = 0; i < posti.length; i++) {\n      if (posti[i].paese === dato.paese) {\n        trovato = true;\n        posti[i].numeri += 1;\n        break;\n      }\n    }\n\n    if (!trovato) posti.push({\n      paese: dato.paese,\n      numeri: 1\n    });\n  }); //costruisco il grafico dei posti\n\n  const [datiGraficoPosti, setDatiGraficoPosti] = useState({\n    labels: posti.map(posto => posto.paese),\n    //lista delle labels della torta\n    datasets: [{\n      label: \"Posti\",\n      data: posti.map(posto => posto.numeri),\n      //dati che usa per creare il grafico\n      backgroundColor: colori //colora le barre\n\n    }]\n  }); //colora le label\n\n  const labels = {\n    plugins: {\n      legend: {\n        display: true,\n        labels: {\n          color: \"white\",\n          font: {\n            size: 20\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grafici\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      id: \"tabellaGrafici\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"cellaGrafici\",\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: datiGraficoComunicazioni,\n              className: \"torta\",\n              options: labels\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this), \"; \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"cellaGrafici\",\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: datiGraficoPosti,\n              className: \"torta\",\n              options: labels\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this), \"; \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grafici, \"OlLQ5Wha1HUrIPaeVvwUF1NP+EE=\");\n\n_c = Grafici;\nexport default Grafici;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grafici\");","map":{"version":3,"sources":["C:/Users/eucas/Documents/UNIVERSITA/3_ANNO/PdS/2022t1/code/frontend/src/js/Grafici.js"],"names":["useState","Pie","Chart","ChartJS","Grafici","dati","comunicazione","paese","id","colori","buoni","errori","forEach","dato","datiGraficoComunicazioni","setDatiGraficoComunicazioni","labels","datasets","label","data","backgroundColor","posti","push","numeri","trovato","i","length","datiGraficoPosti","setDatiGraficoPosti","map","posto","plugins","legend","display","color","font","size"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS } from \"chart.js/auto\"; //questo serve per mostrare il grafico\r\nimport \"../css/Grafici.css\";\r\n\r\nconst Grafici = () => {\r\n\r\n    //esempio semplificato dati dei log\r\n    const dati = [{comunicazione: \"buono\", paese: \"Italia\", id: 2}, {comunicazione: \"errore\", paese: \"Russia\", id:1}, {comunicazione: \"buono\", paese: \"Francia\", id:2}, {comunicazione: \"buono\", paese: \"Italia\", id: 2}];\r\n\r\n    // colori del grafico\r\n    const colori = [\"#33cc33\", \"red\", \"blue\", \"yellow\", \"grey\", \"green\", \"white\", \"orange\", \"black\"]\r\n\r\n\r\n    //costrutto per il grafico delle comunicazioni\r\n    var buoni = 0;\r\n    var errori = 0;\r\n    dati.forEach((dato) => {\r\n        if (dato.comunicazione === \"buono\")\r\n            buoni += 1;\r\n        else\r\n            errori += 1;\r\n    });\r\n\r\n    //costruisco il grafico delle comunicazioni\r\n    const [datiGraficoComunicazioni, setDatiGraficoComunicazioni] = useState({\r\n        labels: [\"Avvenute\", \"Errori\"], //lista delle labels della torta\r\n        datasets: [{\r\n            label: \"Comunicazioni\",\r\n            data: [buoni, errori], //dati che usa per creare il grafico\r\n            backgroundColor: colori //colora le barre\r\n        }],\r\n    });\r\n\r\n    //costrutto per il grafico dei posti\r\n    var posti = [];\r\n    posti.push({paese: dati[0].paese, numeri: 0});\r\n    dati.forEach((dato) => {\r\n        var trovato = false;\r\n        for (var i = 0; i < posti.length; i++)\r\n        {\r\n            if (posti[i].paese === dato.paese)\r\n            {\r\n                trovato = true;\r\n                posti[i].numeri += 1;\r\n                break;\r\n            }\r\n        }\r\n        if (!trovato)\r\n                posti.push({paese: dato.paese, numeri: 1});\r\n    });\r\n\r\n    //costruisco il grafico dei posti\r\n    const [datiGraficoPosti, setDatiGraficoPosti] = useState({\r\n        labels: posti.map((posto) => posto.paese), //lista delle labels della torta\r\n        datasets: [{\r\n            label: \"Posti\",\r\n            data: posti.map((posto) => posto.numeri), //dati che usa per creare il grafico\r\n            backgroundColor: colori //colora le barre\r\n        }],\r\n    });\r\n\r\n\r\n\r\n    //colora le label\r\n    const labels = {\r\n        plugins: {\r\n            legend: {\r\n                display: true,\r\n                labels: {\r\n                    color: \"white\",\r\n                    font: {\r\n                        size: 20\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ( \r\n        <div className=\"grafici\">\r\n            <table id=\"tabellaGrafici\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"cellaGrafici\">\r\n                            <Pie data={datiGraficoComunicazioni} className=\"torta\" options = {labels}/>; {/* grafico delle comunicazioni */}\r\n                        </td>\r\n                        <td className=\"cellaGrafici\">\r\n                            <Pie data={datiGraficoPosti} className=\"torta\" options = {labels}/>; {/* grafico delle comunicazioni */}\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Grafici;"]},"metadata":{},"sourceType":"module"}